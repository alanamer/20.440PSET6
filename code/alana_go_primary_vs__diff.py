# -*- coding: utf-8 -*-
"""alana_GO_primary_vs._diff.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cu2VeDC4pudBtxa14e02WPEgwVHWDG68
"""

# Commented out IPython magic to ensure Python compatibility.
#access gdrive folder: 20_440Project_JS_TF_AMB must be in MyDrive
from google.colab import drive

drive.mount("/content/drive")
# %cd /content/drive/My Drive/20_440Project_JS_TF_AMB

# Commented out IPython magic to ensure Python compatibility.
# %pip install pydeseq2
# %pip install scanpy
# %pip install sanbomics
# %pip install bioinfokit

from pydeseq2.dds import DeseqDataSet
from pydeseq2.ds import DeseqStats
from functools import reduce
from sanbomics.plots import volcano
from bioinfokit import analys,visuz


import pandas as pd
import seaborn as sns
import scanpy as sc
import numpy as np
import matplotlib.pyplot as plt

#run DeSEQ

merged = pd.read_csv('dataset/MetaData/MetaData_unDiffs_TF5.tsv', delimiter='\t')
merged.set_index(merged.columns[0], inplace=True)
merged.sort_index(inplace=True)
merged = merged.astype(int)

labels = ['Primary'] * 5 + ['hiPSC'] * 6

metadata = pd.DataFrame(zip(merged.index, labels),
                        columns = ['Sample', 'Condition'])
metadata = metadata.set_index('Sample')

dds = DeseqDataSet(counts=merged.iloc[0:11],
            metadata=metadata,
            design_factors="Condition")

dds.deseq2()

stat_res = DeseqStats(dds, contrast = ('Condition','Primary','hiPSC'))

stat_res.summary()
res = stat_res.results_df

stat_res_summary = stat_res.results_df
#drop nan rows
stat_res_summary = stat_res_summary.dropna()

sig_genes = stat_res_summary[stat_res_summary.padj<0.05].index
lfc_key = stat_res_summary.log2FoldChange.to_dict()

#use the pyKegg package to visualize the DEG information
#!pip install pykegg
#!pip install requests_cache
import pykegg
import requests_cache
import numpy as np
from PIL import Image

## Cache all the downloaded
requests_cache.install_cache('pykegg_cache')
graph = pykegg.KGML_graph(pid="hsa04260")
nds = graph.get_nodes()
highlight_value = []


## If one of the symbols in identifiers in the nodes is in DEGs
for node in nds.graphics_name:
    in_node = [i.replace("...","") for i in node.split(",")]
    intersect = set(in_node) & set(sig_genes)
    if len(intersect) > 0:
        highlight_value.append(True)
    else:
        highlight_value.append(False)

nds = pykegg.append_colors_continuous_values(nds, lfc_key)
nds["highlight"] = highlight_value
Image.fromarray(pykegg.overlay_opencv_image(nds,
                                            pid="hsa04260",
                                            highlight_nodes="highlight"))
#Cardiac muscle contraction
pykegg.deseq2_raw_map(stat_res_summary, pid="hsa04260", legend_width=2)



# Pull the ipsc vs primary pathways
primary_v_ipsc = pd.read_csv('GSEA/OG_primary.tsv', delimiter='\t')
#sort by NES

primary_v_ipsc = primary_v_ipsc.reindex(primary_v_ipsc['nes'].abs().sort_values(ascending=False).index)

primary_v_ipsc_sorted_top20 = primary_v_ipsc.head(20).copy()


terms = primary_v_ipsc_sorted_top20['Term']
nes = primary_v_ipsc_sorted_top20['nes'].abs() # Taking absolute value

# Commented out IPython magic to ensure Python compatibility.
#plot bar graph of normalized enrichment score for the top 20 pathways enriched in iPSC vs primary
# %matplotlib inline

plt.figure(figsize=(10, 6))
plt.barh(terms, nes, color='skyblue')
plt.xlabel('Absolute Normalized Enrichment Score (|NES|)')  # x-axis label
plt.ylabel('Gene GO Pathway')
plt.title('Pathways Enriched in iPSC-derived vs. Primary Cardiomyocytes')
plt.grid(axis='x')
plt.tight_layout()
plt.show()